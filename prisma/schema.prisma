// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Student {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  cgpa         Float
  experience   Int      @default(0) // in months
  branch       String
  yearOfPassing Int
  resumes      String   @default("") // JSON string array of Google Drive links
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  applications Application[]
}

model Recruiter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  company   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  jobs      Job[]
}

model Job {
  id               String   @id @default(cuid())
  title            String
  description      String
  company          String
  type             String   // 'internship' or 'job'
  minCgpa          Float
  minExperience    Int      @default(0) // in months
  requiredBranches String   // JSON string array
  location         String
  salary           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  postedById       String
  postedBy         Recruiter @relation(fields: [postedById], references: [id], onDelete: Cascade)
  applications     Application[]
}

model Application {
  id         String   @id @default(cuid())
  status     String   @default("pending") // 'pending', 'reviewed', 'accepted', 'rejected'
  resumeLink String   @default("")
  appliedAt  DateTime @default(now())
  
  // Relations
  studentId  String
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  jobId      String
  job        Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, jobId]) // Prevent duplicate applications
}